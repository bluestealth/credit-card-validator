{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","credit-card-validator.js"],"names":[],"mappingsfile":"credit-card-validator-web.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/* \n * @license Copyright (C) 2015 Michael Dempsey\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * Lesser GNU General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/lgpl.html>.\n *\n */\n\nvar map = Array.prototype.map,\n\tcreditCardTypes = [\n\t{\n\t\t'cardName': 'visa',\n\t\t'codeLengths' : [\n\t\t\t{\n\t\t\t\t'accountNum' : 16,\n\t\t\t\t'securityNum': [3]\n\t\t\t}\n\t\t],\n\t\t'regex' : /^4/,\n\t\t'faClass' : 'fa fa-cc-visa'\n\t},\n\t{\n\t\t'cardName' : 'americanexpress',\n\t\t'codeLengths' : [\n\t\t\t{\n\t\t\t\t'accountNum' : 15,\n\t\t\t\t'securityNum': [4]\n\t\t\t}\n\t\t],\n\t\t'regex' : /^3[47]/,\n\t\t'faClass' : 'fa fa-cc-amex'\n\t},\n\t{\n\t\t'cardName' : 'mastercard',\n\t\t'codeLengths' : [\n\t\t\t{\n\t\t\t\t'accountNum' : 16,\n\t\t\t\t'securityNum': [3]\n\t\t\t}\n\t\t],\n\t\t'regex' : /^5[1-5]/,\n\t\t'faClass' : 'fa fa-cc-mastercard'\n\t},\n\t{\n\t\t'cardName' : 'discover',\n\t\t'codeLengths' : [\n\t\t\t{\n\t\t\t\t'accountNum' : 16,\n\t\t\t\t'securityNum': [3]\n\t\t\t}\n\t\t],\n\t\t'regex' : /^6011|^62212[6-9]|^6221[3-9][0-9]|^622[2-8][0-9][0-9]|^6229[0-1][0-9]|^62292[0-5]|^64[4-9]|^65/,\n\t\t'faClass' : 'fa fa-cc-discover'\n\t},\n\t{\n\t\t'cardName' : 'JCB',\n\t\t'codeLengths' : [\n\t\t\t{\n\t\t\t\t'accountNum' : 16,\n\t\t\t\t'securityNum': [3]\n\t\t\t}\n\t\t],\n\t\t'regex' : /^352[89]|^35[3-8][0-9]/,\n\t\t'faClass' : 'fa fa-credit-card'\n\t}\n];\n\nvar getNumberString = function(string) {\n\tvar matches = string.match(/[0-9]+/g);\n\tif(!matches)\n\t\treturn '';\n\treturn matches.join('');\n};\n\nvar luhnCheck = function(numberString) {\n\tfunction processDigit(num) {\n\t\tnum *= 2;\n\t\treturn num < 10 ? num : num%10 + Math.floor(num/10);\n\t}\n\n\tvar intArr = map.call(numberString, function(char) {\n\t\treturn parseInt(char, 10);\n\t});\n\n\tvar arrLen = intArr.length,\n\toddOrEven = arrLen % 2,\n\tchecksum = 0,\n\tindex = 0;\n\n\tfor(; index < arrLen; index++) {\n\t\tif(index%2 === oddOrEven)\n\t\t\tchecksum += processDigit(intArr[index]);\n\t\telse\n\t\t\tchecksum += intArr[index];\n\t}\n\treturn (checksum %10) === 0;\n};\n\nexports.getCardName = function(string) {\n\tvar numberString = getNumberString(string);\n\tvar cardName = '';\n\tfor(var type in creditCardTypes) {\n\t\tif(creditCardTypes[type].regex.test(numberString)) {\n\t\t\tcardName = creditCardTypes[type].cardName;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn cardName;\n};\n\nexports.getFaClass = function(string) {\n\tvar numberString = getNumberString(string);\n\tvar faClass = '';\n\tfor(var type in creditCardTypes) {\n\t\tif(creditCardTypes[type].regex.test(numberString)) {\n\t\t\tfaClass = creditCardTypes[type].faClass;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn faClass;\n};\n\nexports.getCardAccountNumLengths = function(string) {\n\tvar numberString = getNumberString(string);\n\tvar typeLengths = [-1];\n\tfor(var type in creditCardTypes) {\n\t\tif(creditCardTypes[type].regex.test(numberString)) {\n\t\t\tvar codeLengths = creditCardTypes[type].codeLengths;\n\t\t\ttypeLengths = codeLengths.map( function(elem) {\n\t\t\t\treturn elem.accountNum;\n\t\t\t});\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn typeLengths;\n};\n\nexports.getCardSecurityNumLengths = function(string) {\n\tvar numberString = getNumberString(string);\n\tvar typeLengths = [-1];\n\tvar numLength = numberString.length;\n\n\tfor(var type in creditCardTypes) {\n\t\tif(creditCardTypes[type].regex.test(numberString)) {\n\t\t\tvar codeLengths = creditCardTypes[type].codeLengths;\n\t\t\tfor(var i = 0, arrLen = codeLengths.length; i < arrLen; i++) {\n\t\t\t\tif(codeLengths[i].accountNum === numLength) {\n\t\t\t\t\ttypeLengths = codeLengths[i].securityNum;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn typeLengths;\n};\n\nexports.validateCardLength = function(string) {\n\tvar numberString = getNumberString(string);\n\tvar baseTest = /^[0-9]{15,16}$/;\n\n\tif(!baseTest.test(numberString))\n\t\treturn false;\n\n\tvar numLength  = numberString.length;\n\tvar typeLengths = exports.getCardAccountNumLengths(numberString);\n\n\tif(typeLengths[0] < 0 || typeLengths.indexOf(numLength) < 0)\n\t\treturn false\n\n\treturn true;\n};\n\nexports.validateCardSecurityCodeLength = function(accountString, securityString) {\n\tvar accountNumberString = getNumberString(accountString);\n\tvar securityNumberString = getNumberString(securityString);\n\tvar baseTest = /^[0-9]{3,4}$/;\n\n\tif(!baseTest.test(securityString))\n\t\treturn false;\n\n\tvar numLength = securityNumberString.length;\n\tvar typeLengths = exports.getCardSecurityNumLengths(accountNumberString);\n\n\tif(typeLengths[0] < 0 || typeLengths.indexOf(numLength) < 0)\n\t\treturn false;\n\n\treturn true;\n};\n\nexports.validateCardLuhn = function(string) {\n\tvar numberString = getNumberString(string);\n\treturn luhnCheck(numberString);\n};\n\nexports.validateCard = function(accountString) {\n\treturn\texports.validateCardLength(accountString) &&\n\t\texports.validateCardLuhn(accountString);\n};\n\nexports.validateCardAndSecCode = function(accountString, securityString) {\n\treturn\texports.validateCardLength(accountString) &&\n\t\texports.validateCardLuhn(accountString) &&\n\t\texports.validateCardSecurityCodeLength(accountString, securityString);\n};\n"]}